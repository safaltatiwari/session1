# -*- coding: utf-8 -*-
"""Copy of Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XiFxJX_XNT-67WvYUtbc-UIvXFoY4D3U
"""

This is my session 4 activity practice

list1 = ['physics',
'chemistry', 1997, 2000]
list1[1]

list1 = ['physics',
'chemistry', 1997, 2000]
list1[3]

list1 = ['physics',
'chemistry', 1997, 2000]
list1[4]

m = [2]
y = [4]
x = m + y
print(x)

list1 = []
len(list1)

list1 = ['aih']
len(list1)

list1 = list()
len(list1)

list1 = list()
list1.append(2)
len(list1)

8 list1 = []
list1[0] = 2

list1 = [2]
list1[0] = 4
list1[0]

m = [ 2, 4, 5]
5 in m

m = [ 2, 4, 5]
6 in m

m = [ 2, 4, 5]
m[0]

m = [ 2, 4, 5]
m[-1]

m = [ 2, 4, 5]
m[2]

m = [ 2, 4, 5]
m[1:]

m = [ 2, 4, 5, 8, 6]
m[1:3]

m = [1, 3, 7, 2, 8, 10]
m[1:-2]

m = [1, 3, 7, 2, 8, 10]
m.append(3)
m

m = [1, 3, 7, 2, 8, 10, 3]
m.index(3)

m = [1, 3, 7, 2, 8, 10, 3]
m.index(13)

m = [1, 3, 7, 2, 8, 10, 3]
7 in m

m = [1, 3, 7, 2, 8, 10, 3]
13 in m

m = [1, 3, 7, 2, 8, 10, 3]
13 not in m

m = [1, 3, 7, 2, 8, 10, 3]
m.sort()
m

m = [1, 3, 7, 2, 8, 10, 3]
m.sort(reverse=True)
m

m = [1, 3, 7, 2, 8, 10]
m.reverse()
m

m= [10, 8, 2, 7, 3, 1, 2]
m.insert(2, 15)
m

m =[10, 8, 15, 2, 7, 3, 1, 2]
del m[2]
print (m)

m = [10, 8, 2, 7, 3, 1, 2]
m.remove(7)
m

m = [10, 8, 2, 3, 1, 2]
max(m)

m = [10, 8, 2, 3, 1, 2]
min(m)

m = [10, 8, 2, 3, 1, 2]
n=[]
n = n + m
n

m = [10, 8, 2, 3, 1, 2]
n=[]
n = n + m
n is m

m = [10, 8, 2, 3, 1, 2]
n = m
n is m

students = [["sam", 85.5, "hd"], ["ann", 67, "cr"]]
students[0]

students = [
["sam", 85.5, "hd"],
["ann", 67, "cr"]
]
students[0][0]

students = [
["sam", 85.5, "hd"],
["ann", 67, "cr"]
]
for astudent in students:
print(astudent)





students = [
["sam", 85.5, "hd"],
["ann", 67, "cr"]
]
for aStudent in students:
avg = avg + aStudent[1]
avg = avg/2
print(avg)

daysInAWeek = ("Sunday", "Monday", "Tuesday",
"Wednesday", "Thursday",
"Friday", "Saturday")
daysInAWeek[0]

daysInAWeek = ("Sunday",
"Monday", "Tuesday",
"Wednesday", "Thursday",
"Friday", "Saturday")
daysInAWeek[0]= “Sunday”

# Python program to create a simple GUI
# calculator using Tkinter

# import everything from tkinter module
from tkinter import *

# globally declare the expression variable
expression = ""


# Function to update expression
# in the text entry box
def press(num):
    # point out the global expression variable
    global expression

    # concatenation of string
    expression = expression + str(num)

    # update the expression by using set method
    equation.set(expression)


# Function to evaluate the final expression
def equalpress():
    # Try and except statement is used
    # for handling the errors like zero
    # division error etc.

    # Put that code inside the try block
    # which may generate the error
    try:

        global expression

        # eval function evaluate the expression
        # and str function convert the result
        # into string
        total = str(eval(expression))

        equation.set(total)

        # initialize the expression variable
        # by empty string
        expression = ""

        # if error is generate then handle
    # by the except block
    except:

        equation.set(" error ")
        expression = ""

    # Function to clear the contents


# of text entry box
def clear():
    global expression
    expression = ""
    equation.set("")


# Driver code
if __name__ == "__main__":
    # create a GUI window
    gui = Tk()

    # set the background colour of GUI window
    gui.configure(background="light green")

    # set the title of GUI window
    gui.title("Simple Calculator")

    # set the configuration of GUI window
    gui.geometry("270x150")

    # StringVar() is the variable class
    # we create an instance of this class
    equation = StringVar()

    # create the text entry box for
    # showing the expression .
    expression_field = Entry(gui, textvariable=equation)

    # grid method is used for placing
    # the widgets at respective positions
    # in table like structure .
    expression_field.grid(columnspan=4, ipadx=70)

    # create a Buttons and place at a particular
    # location inside the root window .
    # when user press the button, the command or
    # function affiliated to that button is executed .
    button1 = Button(gui, text=' 1 ', fg='black', bg='red',
                     command=lambda: press(1), height=1, width=7)
    button1.grid(row=2, column=0)

    button2 = Button(gui, text=' 2 ', fg='black', bg='red',
                     command=lambda: press(2), height=1, width=7)
    button2.grid(row=2, column=1)

    button3 = Button(gui, text=' 3 ', fg='black', bg='red',
                     command=lambda: press(3), height=1, width=7)
    button3.grid(row=2, column=2)

    button4 = Button(gui, text=' 4 ', fg='black', bg='red',
                     command=lambda: press(4), height=1, width=7)
    button4.grid(row=3, column=0)

    button5 = Button(gui, text=' 5 ', fg='black', bg='red',
                     command=lambda: press(5), height=1, width=7)
    button5.grid(row=3, column=1)

    button6 = Button(gui, text=' 6 ', fg='black', bg='red',
                     command=lambda: press(6), height=1, width=7)
    button6.grid(row=3, column=2)

    button7 = Button(gui, text=' 7 ', fg='black', bg='red',
                     command=lambda: press(7), height=1, width=7)
    button7.grid(row=4, column=0)

    button8 = Button(gui, text=' 8 ', fg='black', bg='red',
                     command=lambda: press(8), height=1, width=7)
    button8.grid(row=4, column=1)

    button9 = Button(gui, text=' 9 ', fg='black', bg='red',
                     command=lambda: press(9), height=1, width=7)
    button9.grid(row=4, column=2)

    button0 = Button(gui, text=' 0 ', fg='black', bg='red',
                     command=lambda: press(0), height=1, width=7)
    button0.grid(row=5, column=0)

    plus = Button(gui, text=' + ', fg='black', bg='red',
                  command=lambda: press("+"), height=1, width=7)
    plus.grid(row=2, column=3)

    minus = Button(gui, text=' - ', fg='black', bg='red',
                   command=lambda: press("-"), height=1, width=7)
    minus.grid(row=3, column=3)

    multiply = Button(gui, text=' * ', fg='black', bg='red',
                      command=lambda: press("*"), height=1, width=7)
    multiply.grid(row=4, column=3)

    divide = Button(gui, text=' / ', fg='black', bg='red',
                    command=lambda: press("/"), height=1, width=7)
    divide.grid(row=5, column=3)

    equal = Button(gui, text=' = ', fg='black', bg='red',
                   command=equalpress, height=1, width=7)
    equal.grid(row=5, column=2)

    clear = Button(gui, text='Clear', fg='black', bg='red',
                   command=clear, height=1, width=7)
    clear.grid(row=5, column='1')

    Decimal = Button(gui, text='.', fg='black', bg='red',
                     command=lambda: press('.'), height=1, width=7)
    Decimal.grid(row=6, column=0)
    # start the GUI
    gui.mainloop()

num = [1,2,3,4,5]
max_num = max(num)
min_num= min(num)
print (max_num, "," , min_num)

